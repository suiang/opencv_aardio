//mat 矩阵类
import util.metaProperty
import gdip
import cv2.matExpr
import console
namespace cv2;
class mat{
	ctor( arg,... ){ //
		var dll = ..cv2._dll;
		var tArg = type(arg)
		if(tArg == type.pointer){
			this.handle = arg
		}
		elseif(tArg == type.null){
			err,ret = dll.core_Mat_new1({ptr p})
			this.handle = ret.p
		}
		elseif( tArg== type.table && type.rget(arg)=="CvSlice" ){
			//todo
		}
		//bitmap传入
		elseif(tArg == type.table && arg[["pBitmap"]]){
			var data = arg.lockData()
			err,ret = dll.core_Mat_new8(arg.height,arg.width,0x10/*_CV_8UC3*/,data.Scan0,data.Stride,{ptr value})
			this.handle = ret.value
			arg.unlockData(data)
		}
		//roi传入
		elseif(tArg==type.table and type.rget(arg)=="mat" and type(...)==type.table){
			var roi = ... 
			err,roi,ret = dll.core_Mat_new7(arg.handle,roi,{pointer value});
			this.handle = ret.value
		}
		elseif(tArg==type.number){
			var params = {...} // rows cols type data step 
			//..console.log(arg,params[1],params[2],params[3],params[4],params[5])
			err,ret = dll.core_Mat_new8(arg,params[1],params[2],params[3],params[4],params[5],{pointer value})
			this.handle = ret.value
		}
		
		err,this.cvPtr = call(function(){
			var err, stu = dll.core_InputArray_new_byMat(this.handle,{ptr p});
			return stu.p
		})
		..table.gc( this,"release" )
	};
	
	sizeAt = function(dim){
		return dll.core_Mat_sizeAt(this.handle,dim); 
	}
	
	size = function(){
		var err,stu = dll.core_Mat_size(this,::SIZE(0,0))
		return stu; 
	}
	
	step = function(){
		return dll.core_Mat_step(this.handle); 
	}
	
	empty = function(){
		return dll.core_Mat_empty(this.handle)==1;
	}
	
	clone = function(){
		var err,ret = dll.core_Mat_clone(this.handle,{pointer value})
		return ..cv2.mat(ret.value)
	}
	
	depth = function(){
		var err,ret = dll.core_Mat_depth(this.handle,{int value})
		return ret.value; 
	}
	
	["type"] = function(){
		var err,ret =  dll.core_Mat_type(this,{int value })
		return ret.value; 
	}
	
	channels = function(){
		var err,ret =  dll.core_Mat_channels(this,{int value })
		return ret.value; 
	}
	
	step1 = function(i=0){
		var err,ret = dll.core_Mat_step1(this,i,{int value})
		return ret.value; 
	}
	
	at = function(...){
		var params = {...};
		var paramsLen = #params
		var ref = {ptr value}
		if(paramsLen==1){
			dll.core_Mat_ptr1d(this.handle,params[1],ref);
		}elseif(paramsLen==2){
			dll.core_Mat_ptr2d(this.handle,params[1],params[2],ref);
		}elseif(paramsLen==3){
			dll.core_Mat_ptr3d(this.handle,params[1],params[2],params[3],ref);
		}
		var buffer = ..raw.buffer(0xA/*_CV_MAX_ARR*/,ref.value)
		return buffer;
		//var ret = ..raw.convert(ref.value,{BYTE value[0xA/*_CV_MAX_ARR*/]})
		//return ret.value;
	}
	
	row = function(y){
		var err,ret = dll.core_Mat_row(this,y,{pointer value})
		return ..cv2.mat(ret.value); 
	}
	
	col = function(x){
		var err,ret = dll.core_Mat_col(this,x,{pointer value})
		return ..cv2.mat(ret.value); 
	}
	
	rowRange = function(startRow,endRow){
		var err,ret = dll.core_Mat_rowRange(this,startRow,endRow,{pointer value})
		return ..cv2.mat(ret.value); 
	}
	
	colRange = function(startCol,endCol){
		var err,ret = dll.core_Mat_colRange(this,startCol,endCol,{pointer value})
		return ..cv2.mat(ret.value); 
	}
	
	diag = function(d){
		var err,ret = dll.core_Mat_diag(this,d,{pointer value})
		return ..cv2.mat(ret.value); 
	}
	
	isContinuous = function(){
		var err,ret = dll.core_Mat_isContinuous(this,{int value})
		return ret.value != 0; 
	}
	
	isSubmatrix = function(){
		var err,ret = dll.core_Mat_isSubmatrix(this,{int value})
		return ret.value != 0; 
	}
	
	toBitmap = function(){
		if(this.empty() or this.depth() != 0/*_CV_8U*/) return null;
		var dst = this;
		if(this.channels()==1){
			dst = ..cv2.cvtColor( this,9/*_CV2_COLOR_GRAY2BGRA*/) 
		}elseif(this.channels()==3){
			dst = ..cv2.cvtColor( this,0/*_CV2_COLOR_BGR2BGRA*/ )
		}
		//this.release()
		var bmp,err = ..gdip.bitmap( dst.width,dst.height,0x26200A/*_PixelFormat32bppARGB*/,dst.data,dst.step1() )
		//dst.delete()
		return bmp,err;
	}
	
	zeros = function(rows,cols,tp){
		var err,ret = dll.core_Mat_zeros1(rows,cols,tp,{pointer p})
		var matHandle = ..cv2.matExpr(ret.p).toMat()
		return ..cv2.mat(matExpr.ptr); 
	}
	
	ones = function(rows,cols,tp){
		var err,ret = dll.core_Mat_ones1(rows,cols,tp,{pointer p})
		var m = ..cv2.matExpr(ret.p)
		return m; 
	}
	
	eye = function(rows,cols,tp){
		var err,ret = dll.core_Mat_eye(rows,cols,tp,{pointer p})
		var m = ..cv2.matExpr(ret.p)
		return m; 
	}
	
	t = function(){
		var err,ret = dll.core_Mat_t(this,{pointer p})
		var m = ..cv2.matExpr(ret.p)
		return m; 
	}
	
	convertTo = function(rtype,alpha=1,beta=0){
		var dst = ..cv2.mat();
		var err = core_Mat_convertTo(this,dst.cvPtr,rtype,alpha,beta)
		return dst;
	}
	
	reshape = function(){
		//core_Mat_reshape1
	}
	
	exp = function(){
		var dst = ..cv2.mat();
		dll.core_exp_Mat(this.cvPtr,dst.cvPtr)
		return dst; 
	}
	
	log = function(){
		var dst = ..cv2.mat();
		dll.core_log_Mat(this.cvPtr,dst.cvPtr)
		return dst; 		
	}
	
	release = function(){
		if(this[["handle"]] && this[["cvPtr"]]){
			dll.core_InputArray_delete(this.cvPtr)
			dll.core_Mat_delete(this)
			this[["handle"]] = null;
			this[["cvPtr"]] = null	
		}
	}
	@_metaProperty;
}

namespace mat {
    var dll = ..cv2._dll;
    core_Mat_convertTo = dll.api("core_Mat_convertTo","INT(pointer self, pointer m, int rtype, double alpha, double beta)")
	core_Mat_mul = dll.api("core_Mat_mul","INT(pointer self, pointer m,double scale,struct ret)")
	core_Mat_operatorMultiply_MatDouble = dll.api("core_Mat_operatorMultiply_MatDouble","INT(pointer self,double s,pointer ret)")
	_metaProperty = ..util.metaProperty(
		_topointer = function(){
			return owner.handle; 
		}
		_type = "mat";
		
		_call = function(x,y,w,h){
			var r = ::RECT(x,y,w,h)
			return ..cv2.mat(owner,r); 
		}
		

/*
		cvPtr = {
			_get = function(){
				var err, stu = dll.core_InputArray_new_byMat(owner.handle,{ptr p});
				return stu.p				
			}
		}
*/

		data = {
			_get = function(){
				var err,stu = dll.core_Mat_data(owner.handle,{ptr buffer})
				return stu.buffer;	
			}
		}
		
		datastart = {
			_get = function(){
				var err,stu = dll.core_Mat_datastart(owner.handle,{ptr buffer})
				return stu.buffer;	
			}
		}		
	
		dataend = {
			_get = function(){
				var err,stu = dll.core_Mat_dataend(owner.handle,{ptr buffer})
				return stu.buffer;	
			}
		}
	
		datalimit = {
			_get = function(){
				var err,stu = dll.core_Mat_datalimit(owner.handle,{ptr buffer})
				return stu.buffer;	
			}
		}	
			
		cols = {
			_get = function(){
				var err,stu = dll.core_Mat_cols(owner.handle,{int value}); 
				return stu.value
			}
			
		};
		width = {
			_get = function(){
				return owner.cols; 				
			}
		}
		
		rows = {
			_get = function(){
				var err,stu = dll.core_Mat_rows(owner.handle,{int value}); 
				return stu.value
			}
		}
		
		height = {
			_get = function(){
				return owner.rows; 
			}
		}
		
		shape = {
			_get = function(){
				return {owner.height,owner.width,owner.channels()}; 
			}	
		}
		
		elemSize = {
			_get = function(){
				var err,stu = dll.core_Mat_elemSize(owner.handle,{int value})
				return stu.value; 
			}
		}
		
		elemSize1 = {
			_get = function(){
				var err,stu = dll.core_Mat_elemSize1(owner.handle,{int value})
				return stu.value; 
			}
		}
		
		
	)
}